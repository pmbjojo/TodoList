@using TodoList.Shared.Contracts.Services
@using TodoList.Services
@using TodoList.Shared.Domains
@inject ITodoDataService TodoDataService;
@inject TodosRefreshService TodosRefreshService;
@rendermode InteractiveServer

@if (todos == null)
{
    <p>Loading...</p>
}
else if (todos.Count == 0)
{
    <p>Todos empty</p>
}
else
{
    <Grid Columns="GridColumns.Are3">
        @foreach (var todo in todos)
        {
            <TodoCard todo="@todo" />
        }
    </Grid>
}

@code {
    public List<Todo> todos { get; set; } = new List<Todo>();
    private async Task RefreshTodos()
    {
        todos = (await TodoDataService.GetAllTodos()).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        TodosRefreshService.OnTodosModified += RefreshTodos;
        await RefreshTodos();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        TodosRefreshService.OnTodosModified -= RefreshTodos;
    }
}
